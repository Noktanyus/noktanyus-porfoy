name: ⚡ Enhanced Performance Monitoring

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
  schedule:
    # Her hafta Pazartesi saat 09:00'da çalış (UTC)
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'Type of performance analysis'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - bundle-only
        - lighthouse-only

env:
  NODE_VERSION: '20.x'

jobs:
  # 📊 Bundle Size Analysis
  bundle-analysis:
    name: 📊 Bundle Size Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.analysis_type != 'lighthouse-only' || github.event.inputs.analysis_type == null
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 📝 Setup build environment
        run: |
          cat > .env.local << EOF
          NEXTAUTH_SECRET=perf-analysis-secret
          DATABASE_URL=file:./perf.db
          NEXTAUTH_URL=http://localhost:3000
          ADMIN_EMAIL=admin@example.com
          ADMIN_PASSWORD=admin123
          NEXT_PUBLIC_BASE_URL=http://localhost:3000
          EMAIL_SERVER=smtp.example.com
          EMAIL_PORT=587
          EMAIL_USER=test@example.com
          EMAIL_PASSWORD=testpassword
          TURNSTILE_SECRET_KEY=test-turnstile-secret
          NEXT_PUBLIC_TURNSTILE_SITE_KEY=test-turnstile-site-key
          EOF

      - name: 🗄️ Setup Prisma
        run: |
          npx prisma generate --schema=./prisma/schema.ci.prisma
          npx prisma db push --schema=./prisma/schema.ci.prisma --accept-data-loss

      - name: 🏗️ Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: 📊 Comprehensive bundle analysis
        run: |
          echo "# 📊 Comprehensive Bundle Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d ".next" ]; then
            # Total build size
            BUILD_SIZE=$(du -sh .next | cut -f1)
            STATIC_SIZE=$(du -sh .next/static 2>/dev/null | cut -f1 || echo "N/A")
            
            echo "## 📦 Build Size Overview" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Size |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Build | $BUILD_SIZE |" >> $GITHUB_STEP_SUMMARY
            echo "| Static Assets | $STATIC_SIZE |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Page analysis
            echo "## 📄 Page Analysis" >> $GITHUB_STEP_SUMMARY
            STATIC_PAGES=$(find .next -name "*.html" | wc -l)
            SERVER_PAGES=$(find .next/server/app -name "page.js" 2>/dev/null | wc -l || echo "0")
            echo "- **Static pages**: $STATIC_PAGES" >> $GITHUB_STEP_SUMMARY
            echo "- **Server pages**: $SERVER_PAGES" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # JavaScript bundles analysis
            echo "## 📄 JavaScript Bundles (Top 10)" >> $GITHUB_STEP_SUMMARY
            echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
            echo "|------|------|" >> $GITHUB_STEP_SUMMARY
            find .next/static -name "*.js" -type f -exec du -h {} + 2>/dev/null | \
            sort -hr | head -10 | while read size file; do
              echo "| $(basename $file) | $size |" >> $GITHUB_STEP_SUMMARY
            done || echo "| No JS files found | - |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # CSS files analysis
            echo "## 🎨 CSS Files" >> $GITHUB_STEP_SUMMARY
            echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
            echo "|------|------|" >> $GITHUB_STEP_SUMMARY
            find .next/static -name "*.css" -type f -exec du -h {} + 2>/dev/null | \
            sort -hr | head -5 | while read size file; do
              echo "| $(basename $file) | $size |" >> $GITHUB_STEP_SUMMARY
            done || echo "| No CSS files found | - |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Performance recommendations
            echo "## 💡 Performance Recommendations" >> $GITHUB_STEP_SUMMARY
            echo "### 🎯 Optimization Tips:" >> $GITHUB_STEP_SUMMARY
            echo "- **Code Splitting**: Use dynamic imports for large components" >> $GITHUB_STEP_SUMMARY
            echo "- **Tree Shaking**: Remove unused code and dependencies" >> $GITHUB_STEP_SUMMARY
            echo "- **Image Optimization**: Use Next.js Image component with proper sizing" >> $GITHUB_STEP_SUMMARY
            echo "- **Bundle Analysis**: Regularly monitor bundle sizes" >> $GITHUB_STEP_SUMMARY
            echo "- **Lazy Loading**: Implement lazy loading for non-critical resources" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build directory not found!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📦 Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis-${{ github.sha }}
          path: |
            .next/
            !.next/cache
          retention-days: 7

  # 📊 Performance Summary
  performance-summary:
    name: 📊 Performance Summary
    runs-on: ubuntu-latest
    needs: [bundle-analysis]
    if: always()
    
    steps:
      - name: 📊 Generate performance summary
        run: |
          echo "# ⚡ Performance Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Analysis Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 Bundle Analysis | ${{ needs.bundle-analysis.result == 'success' && '✅ Completed' || needs.bundle-analysis.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | Check bundle sizes and optimization opportunities |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.bundle-analysis.result }}" == "success" ]]; then
            echo "## 🎯 Key Performance Insights" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 💡 Optimization Recommendations:" >> $GITHUB_STEP_SUMMARY
            echo "1. **Monitor Bundle Sizes**: Keep JavaScript bundles under 5MB total" >> $GITHUB_STEP_SUMMARY
            echo "2. **Image Optimization**: Use WebP/AVIF formats and proper sizing" >> $GITHUB_STEP_SUMMARY
            echo "3. **Code Splitting**: Implement dynamic imports for large components" >> $GITHUB_STEP_SUMMARY
            echo "4. **Caching Strategy**: Leverage browser and CDN caching" >> $GITHUB_STEP_SUMMARY
            echo "5. **Core Web Vitals**: Focus on LCP, FID, and CLS metrics" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📈 Performance Tracking:" >> $GITHUB_STEP_SUMMARY
            echo "- Regular monitoring helps identify performance regressions" >> $GITHUB_STEP_SUMMARY
            echo "- Set up alerts for bundle size increases" >> $GITHUB_STEP_SUMMARY
            echo "- Track performance metrics over time" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Performance analysis incomplete**. Please check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Performance analysis completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY