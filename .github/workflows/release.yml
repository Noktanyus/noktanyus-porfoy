name: 🚀 Release & Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/noktanyus-portfolio

jobs:
  # 🏷️ Create Release
  create-release:
    name: 🏷️ Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release-tag: ${{ steps.tag.outputs.tag }}
      release-notes: ${{ steps.notes.outputs.notes }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Get tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: 📝 Generate release notes
        id: notes
        run: |
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "## 🚀 What's New in ${{ steps.tag.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "### 📋 Changes:" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> $GITHUB_OUTPUT
          else
            echo "### 📋 Initial Release" >> $GITHUB_OUTPUT
            echo "- First release of Noktanyus Portfolio" >> $GITHUB_OUTPUT
          fi
          
          echo "" >> $GITHUB_OUTPUT
          echo "### 🐳 Docker Image:" >> $GITHUB_OUTPUT
          echo "\`\`\`bash" >> $GITHUB_OUTPUT
          echo "docker pull ${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🚀 Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body: ${{ steps.notes.outputs.notes }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  # 🧪 Pre-Release Tests
  pre-release-tests:
    name: 🧪 Pre-Release Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🔍 Run linter
        run: npm run lint

      - name: 🧪 Run tests
        run: npm run test -- --coverage --watchAll=false

      - name: 🏗️ Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

  # 🐳 Build & Push Release Image
  build-release-image:
    name: 🐳 Build Release Image
    runs-on: ubuntu-latest
    needs: [create-release, pre-release-tests]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest
            type=raw,value=stable

      - name: 🐳 Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
            TURNSTILE_SECRET_KEY=${{ secrets.TURNSTILE_SECRET_KEY }}
            EMAIL_SERVER=${{ secrets.EMAIL_SERVER }}
            EMAIL_PORT=${{ secrets.EMAIL_PORT }}
            EMAIL_USER=${{ secrets.EMAIL_USER }}
            EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
            NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
            NEXT_PUBLIC_TURNSTILE_SITE_KEY=${{ secrets.NEXT_PUBLIC_TURNSTILE_SITE_KEY }}

  # 📊 Release Summary
  release-summary:
    name: 📊 Release Summary
    runs-on: ubuntu-latest
    needs: [create-release, build-release-image]
    if: always()
    
    steps:
      - name: 🎉 Release Success
        if: needs.create-release.result == 'success' && needs.build-release-image.result == 'success'
        run: |
          echo "## 🎉 Release ${{ needs.create-release.outputs.release-tag }} Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Tasks:" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ GitHub release created" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Docker images built and pushed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Available Images:" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.release-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.IMAGE_NAME }}:stable\`" >> $GITHUB_STEP_SUMMARY

      - name: ❌ Release Failed
        if: needs.create-release.result == 'failure' || needs.build-release-image.result == 'failure'
        run: |
          echo "## ❌ Release Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Status:" >> $GITHUB_STEP_SUMMARY
          echo "- Create Release: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Image: ${{ needs.build-release-image.result }}" >> $GITHUB_STEP_SUMMARY
          exit 1